<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Danh sách thể loại</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f4f4f9;
      color: #333;
      margin: 0;
      padding: 20px;
    }
    h3 {
     
      margin-bottom: 20px;
    }
    table {
      width: 90%;
      margin: 20px auto;
      border-collapse: collapse;
      background-color: #ffffff;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    th, td {
      border: 1px solid #ddd;
      padding: 15px;
      text-align: center;
    }
    th {
      background-color: #007bff;
      color: white;
      font-weight: bold;
    }
    tr:nth-child(even) {
      background-color: #f9f9f9;
    }
    tr:hover {
      background-color: #e9ecef;
    }
    .addcategory {
      display: flex;
      justify-content: flex-end;
      margin: 20px;
    }
    .addcategory a {
      background-color: #007bff;
      color: white;
      padding: 12px 24px;
      text-decoration: none;
      border-radius: 6px;
      font-weight: bold;
      transition: background-color 0.3s ease;
    }
    .addcategory a:hover {
      background-color: #0056b3;
    }
    .dialog, .alert-dialog {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 500px; /* Tăng kích thước dialog */
      padding: 30px; /* Tăng padding */
      background-color: #ffffff;
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); /* Tăng độ đổ bóng */
      border-radius: 10px; /* Đổi góc bo tròn */
      z-index: 1000;
    }
    .dialog.active, .alert-dialog.active {
      display: block;
    }
    .dialog-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.6); /* Tăng độ tối của overlay */
      z-index: 500;
    }
    .dialog-overlay.active {
      display: block;
    }
    .dialog .form-group {
      margin-bottom: 20px;
    }
    .dialog .form-group label {
      display: block;
      margin-bottom: 10px;
      font-weight: bold;
    }
    .dialog .form-group input {
      width: calc(100% - 22px);
      padding: 15px; /* Tăng padding của input */
      box-sizing: border-box;
      border: 1px solid #ddd;
      border-radius: 6px;
    }
    .dialog .form-actions {
      text-align: right;
    }
    .dialog .form-actions button {
      padding: 14px 28px; /* Tăng padding của nút */
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      margin-left: 10px;
      font-weight: bold;
      transition: background-color 0.3s ease;
    }
    .dialog .form-actions button.cancel {
      background-color: #6c757d;
    }
    .dialog .form-actions button:hover {
      background-color: #0056b3;
    }
    .dialog .form-actions button.cancel:hover {
      background-color: #5a6268;
    }
    .alert-dialog {
      border: 2px solid transparent;
      padding: 30px; /* Tăng padding của alert-dialog */
      text-align: center;
      max-width: 80%;
    }
    .alert-dialog.success {
      border-color: #28a745;
      background-color: #d4edda;
      color: #155724;
    }
    .alert-dialog.error {
      border-color: #dc3545;
      background-color: #f8d7da;
      color: #721c24;
    }
    .alert-dialog h3 {
      margin-bottom: 20px;
    }
    .alert-dialog .form-actions {
      text-align: center;
    }
    .alert-dialog .form-actions button {
      padding: 14px 28px; /* Tăng padding của nút */
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: bold;
      transition: background-color 0.3s ease;
    }
    .alert-dialog.success button {
      background-color: #28a745;
    }
    .alert-dialog.error button {
      background-color: #dc3545;
    }
    .alert-dialog button:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body>
  <%- include('navbar.ejs') %>
  <div style="margin-left: 275px">
    <h3>Danh sách thể loại</h3>
    <div class="addcategory">
      <a class="nav-link" href="javascript:void(0)" onclick="openDialog()">Thêm thể loại</a>
    </div>

    <div class="dialog-overlay" id="dialogOverlay"></div>
    <div class="dialog" id="dialog">
      <h3>Thêm thể loại</h3>
      <div class="form-group">
        <label for="categoryName">Tên thể loại</label>
        <input type="text" id="categoryName" name="categoryName" />
      </div>
      <div class="form-actions">
        <button type="button" onclick="saveCategory()">Lưu</button>
        <button type="button" class="cancel" onclick="closeDialog()">Hủy</button>
      </div>
    </div>

    <div class="dialog" id="editDialog">
      <h3>Chỉnh sửa thể loại</h3>
      <div class="form-group">
        <label for="editCategoryName">Tên thể loại</label>
        <input type="text" id="editCategoryName" name="categoryName" />
      </div>
      <div class="form-actions">
        <button type="button" onclick="updateCategory()">Cập nhật</button>
        <button type="button" class="cancel" onclick="closeEditDialog()">Hủy</button>
      </div>
    </div>

    <div class="alert-dialog success" id="successDialog">
      <h3>Thành công</h3>
      <div class="form-actions">
        <button type="button" onclick="closeSuccessDialog()">Đóng</button>
      </div>
    </div>

    <div class="alert-dialog error" id="errorDialog">
      <h3>Thất bại</h3>
      <div class="form-actions">
        <button type="button" onclick="closeErrorDialog()">Đóng</button>
      </div>
    </div>

    <table id="category-table">
      <thead>
        <tr>
          <th scope="col">ID</th>
          <th scope="col">Tên thể loại</th>
          <th scope="col">Người tạo</th>
          <th scope="col">Chức năng</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <script>
    const token = localStorage.getItem("token");
    let editingCategoryId = null;

    function fetchCategories() {
      fetch("/api/category/get", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === "1") {
          const tableBody = document.querySelector("#category-table tbody");
          tableBody.innerHTML = "";

          data.data.forEach(category => {
            const row = document.createElement("tr");
            row.innerHTML = `
              <td>${category.category_id}</td>
              <td>${category.category_name}</td>
              <td>${category.created_by}</td>
              <td>
                <button onclick="openEditDialog(${category.category_id}, '${category.category_name}')">Sửa</button>
                <button onclick="deleteCategory(${category.category_id})">Xóa</button>
              </td>
            `;
            tableBody.appendChild(row);
          });
        } else {
          alert(`Lấy danh sách thể loại thất bại: ${data.message}`);
        }
      })
      .catch(error => console.error("Error fetching categories:", error));
    }

    function openDialog() {
      document.getElementById("dialog").classList.add("active");
      document.getElementById("dialogOverlay").classList.add("active");
    }

    function closeDialog() {
      document.getElementById("dialog").classList.remove("active");
      document.getElementById("dialogOverlay").classList.remove("active");
    }

    function openEditDialog(categoryId, categoryName) {
      editingCategoryId = categoryId;
      document.getElementById("editCategoryName").value = categoryName;
      document.getElementById("editDialog").classList.add("active");
      document.getElementById("dialogOverlay").classList.add("active");
    }

    function closeEditDialog() {
      editingCategoryId = null;
      document.getElementById("editDialog").classList.remove("active");
      document.getElementById("dialogOverlay").classList.remove("active");
      document.getElementById("editCategoryName").value = "";
    }

    function showAlertDialog(type, message) {
      const dialog = type === 'success' ? document.getElementById("successDialog") : document.getElementById("errorDialog");
      dialog.querySelector('h3').textContent = message;
      dialog.classList.add("active");
      document.getElementById("dialogOverlay").classList.add("active");
    }

    function closeSuccessDialog() {
      document.getElementById("successDialog").classList.remove("active");
      document.getElementById("dialogOverlay").classList.remove("active");
    }

    function closeErrorDialog() {
      document.getElementById("errorDialog").classList.remove("active");
      document.getElementById("dialogOverlay").classList.remove("active");
    }

    function saveCategory() {
      const categoryName = document.getElementById("categoryName").value;

      if (!token) {
        alert("Bạn cần đăng nhập để thêm thể loại.");
        return;
      }

      fetch("/api/category/add", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ name: categoryName }),
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === "1") {
          showAlertDialog('success', "Thêm thể loại thành công!");
          closeDialog();
          fetchCategories();
        } else {
          showAlertDialog('error', `Thêm thể loại thất bại: ${data.message}`);
        }
      })
      .catch(error => {
        console.error("Error:", error);
        showAlertDialog('error', "Có lỗi xảy ra.");
      });
    }

    function updateCategory() {
      const categoryName = document.getElementById("editCategoryName").value;

      if (!token) {
        alert("Bạn cần đăng nhập để chỉnh sửa thể loại.");
        return;
      }

      fetch("/api/category/update", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          name: categoryName,
          category_id: editingCategoryId,
        }),
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === "1") {
          showAlertDialog('success', "Cập nhật thể loại thành công!");
          closeEditDialog();
          fetchCategories();
        } else {
          showAlertDialog('error', `Cập nhật thể loại thất bại: ${data.message}`);
        }
      })
      .catch(error => {
        console.error("Error:", error);
        showAlertDialog('error', "Có lỗi xảy ra.");
      });
    }

    function deleteCategory(categoryId) {
      fetch(`/api/category/delete/${categoryId}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === "1") {
          showAlertDialog('success', "Xóa thể loại thành công!");
          fetchCategories();
        } else {
          showAlertDialog('error', `Xóa thể loại thất bại: ${data.message}`);
        }
      })
      .catch(error => {
        console.error("Error:", error);
        showAlertDialog('error', "Có lỗi xảy ra.");
      });
    }

    document.addEventListener("DOMContentLoaded", fetchCategories);
  </script>
</body>
</html>
