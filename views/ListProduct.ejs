<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Danh sách sản phẩm</title>
    <style>
      .main {
        margin-left: 275px;
      }
      .h3_table {
        text-align: left;
        margin-left: 10px;
        margin-right: 25px;
        color: #ff7622;
      }
      table {
        width: 95%;
        margin: 20px auto;
        border-collapse: collapse;
      }
      th,
      td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: center;
      }
      th {
        background-color: #f2f2f2;
      }
      tr:nth-child(even) {
        background-color: #f9f9f9;
      }
      tr:hover {
        background-color: #ddd;
      }
      .addbook_category {
        display: flex;
        margin-left: 10px;
      }
      .dialog {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 300px;
        padding: 20px;
        background-color: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
      }
      .dialog.active {
        display: block;
      }
      .dialog-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 500;
      }
      .dialog-overlay.active {
        display: block;
      }
      .dialog .form-group {
        margin-bottom: 15px;
      }
      .dialog .form-group label {
        display: block;
        margin-bottom: 5px;
      }
      .dialog .form-group input,
      .dialog .form-group textarea,
      .dialog .form-group select {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
      }
      .dialog .form-actions {
        text-align: right;
      }
      .dialog .form-actions button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      .dialog .form-actions button.cancel {
        background-color: #6c757d;
      }
      .pagination {
        margin: 20px auto;
        text-align: center;
      }
      .pagination button {
        padding: 10px 20px;
        margin: 0 5px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      .pagination span {
        margin: 0 10px;
      }
      .ellipsis {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 200px;
        display: block;
      }
    </style>
  </head>
  <body>
    <%- include('navbar.ejs') %>
    <div class="main">
      <h3 class="h3_table">Danh sách sản phẩm</h3>
      <div class="addbook_category">
        <a class="nav-link" href="javascript:void(0)" onclick="openDialog()"
          >Thêm sách</a
        >
        <a class="nav-link" href="/admin/Author">Tác giả</a>
        <a class="nav-link" href="/admin/Category">Thể loại</a>
      </div>
      <table id="book-table">
        <thead>
          <tr>
            <th>STT</th>
            <th>Mã Sách</th>
            <th>Tên Sách</th>
            <th>Tác giả</th>
            <th>Thể loại</th>
            <th>Mô tả</th>
            <th>Năm xuất bản</th>
            <th>Ảnh bìa</th>
            <th>Giá cũ</th>
            <th>Giá mới</th>
            <th>Chức năng</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <div class="pagination">
        <button onclick="previousPage()">Trang trước</button>
        <span id="page-indicator">Trang 1</span>
        <button onclick="nextPage()">Trang sau</button>
      </div>

      <div class="addbook">
        <div class="dialog-overlay" id="dialogOverlay"></div>
        <div class="dialog" id="dialog">
          <h3 id="dialog-title">Thêm sách</h3>
          <div class="form-group">
            <label for="bookTitle">Tiêu đề</label>
            <input type="text" id="bookTitle" name="title" />
          </div>
          <div class="form-group">
            <label for="authorSelect">Tác giả</label>
            <select id="authorSelect" name="author_id"></select>
          </div>
          <div class="form-group">
            <label for="categorySelect">Thể loại</label>
            <select id="categorySelect" name="category_id"></select>
          </div>
          <div class="form-group">
            <label for="description">Mô tả</label>
            <textarea id="description" name="description"></textarea>
          </div>
          <div class="form-group">
            <label for="publicationYear">Năm xuất bản</label>
            <input type="text" id="publicationYear" name="publication_year" />
          </div>
          <div class="form-group">
            <label for="oldPrice">Giá cũ</label>
            <input type="text" id="oldPrice" name="old_price" />
          </div>
          <div class="form-group">
            <label for="newPrice">Giá mới</label>
            <input type="text" id="newPrice" name="new_price" />
          </div>
          <div class="form-group">
            <label for="bookAvatar">Ảnh bìa sách</label>
            <input type="file" id="bookAvatar" name="book_avatar" />
          </div>
          <div class="form-actions">
            <button type="button" onclick="saveBook()">Lưu</button>
            <button type="button" class="cancel" onclick="closeDialog()">
              Hủy
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      let currentPage = 1;
      const itemsPerPage = 10;
      let isEditMode = false;
      let editBookId = null;
      const token = localStorage.getItem("token");

      function fetchBooks(page = currentPage) {
        const offset = (page - 1) * itemsPerPage;
        fetch(`/api/book/get`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((data) => {
            if (data.status === "1") {
              const tableBody = document.querySelector("#book-table tbody");
              tableBody.innerHTML = "";

              data.data.data.forEach((book, index) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                <td>${index + 1}</td>
                <td>${book.book_id}</td>
                <td>${book.title}</td>
                <td>${book.author_name}</td>
                <td>${book.category_name}</td>
                <td class="ellipsis">${book.description}</td>
                <td>${book.publication_year}</td>
                <td><img src="${book.book_avatar}" alt="${
                  book.title
                }" width="50"></td>
                <td>${book.old_price}</td>
                <td>${book.new_price}</td>
                <td>
                  <button onclick="openEditDialog(${book.book_id}, '${
                  book.title
                }', '${book.author_id}', '${book.category_id}', '${
                  book.description
                }', '${book.publication_year}', '${book.old_price}', '${
                  book.new_price
                }', '${book.book_avatar}')">Sửa</button>
                  <button onclick="deleteBook(${book.book_id})">Xóa</button>
                </td>
              `;
                tableBody.appendChild(row);
              });

              const pageIndicator = document.getElementById("page-indicator");
              pageIndicator.textContent = `Trang ${page}`;

              currentPage = page;
            } else {
              alert(`Lấy danh sách sách thất bại: ${data.message}`);
            }
          })
          .catch((error) => {
            console.error("Error fetching books:", error);
            alert(`Có lỗi xảy ra khi lấy danh sách sách: ${error.message}`);
          });
      }

      function previousPage() {
        if (currentPage > 1) {
          fetchBooks(currentPage - 1);
        }
      }

      function nextPage() {
        fetchBooks(currentPage + 1);
      }

      function fetchAuthors() {
        const authorSelect = document.getElementById("authorSelect");
        fetch("/api/author/get", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.status === "1") {
              authorSelect.innerHTML = "";
              data.data.rows.forEach((author) => {
                const option = document.createElement("option");
                option.value = author.author_id;
                option.textContent = author.author_name;
                authorSelect.appendChild(option);
              });
            } else {
              alert(`Lấy danh sách tác giả thất bại: ${data.message}`);
            }
          })
          .catch((error) => console.error("Error fetching authors:", error));
      }

      function fetchCategories() {
        fetch("/api/category/get", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.status === "1") {
              const categorySelect = document.getElementById("categorySelect");
              categorySelect.innerHTML = "";
              data.data.forEach((category) => {
                const option = document.createElement("option");
                option.value = category.category_id;
                option.textContent = category.category_name;
                categorySelect.appendChild(option);
              });
            } else {
              alert(`Lấy danh sách thể loại thất bại: ${data.message}`);
            }
          })
          .catch((error) => console.error("Error fetching categories:", error));
      }

      function openDialog() {
        fetchAuthors();
        fetchCategories();
        document.getElementById("dialog").classList.add("active");
        document.getElementById("dialogOverlay").classList.add("active");
      }

      function openEditDialog(
        bookId,
        title,
        authorId,
        categoryId,
        description,
        publicationYear,
        oldPrice,
        newPrice,
        bookAvatar
      ) {
        isEditMode = true;
        editBookId = bookId;
        openDialog();

        document.getElementById("dialog-title").textContent = "Sửa sách";
        document.getElementById("bookTitle").value = title;
        document.getElementById("authorSelect").value = authorId;
        document.getElementById("categorySelect").value = categoryId;
        document.getElementById("description").value = description;
        document.getElementById("publicationYear").value = publicationYear;
        document.getElementById("oldPrice").value = oldPrice;
        document.getElementById("newPrice").value = newPrice;
      }

      function closeDialog() {
        document.getElementById("dialog").classList.remove("active");
        document.getElementById("dialogOverlay").classList.remove("active");
      }

      function saveBook() {
        const formData = new FormData();
        formData.append("title", document.getElementById("bookTitle").value);
        formData.append(
          "author_id",
          document.getElementById("authorSelect").value
        );
        formData.append(
          "category_id",
          document.getElementById("categorySelect").value
        );
        formData.append(
          "description",
          document.getElementById("description").value
        );
        formData.append(
          "publication_year",
          document.getElementById("publicationYear").value
        );
        formData.append("old_price", document.getElementById("oldPrice").value);
        formData.append("new_price", document.getElementById("newPrice").value);

        const bookAvatarInput = document.getElementById("bookAvatar");
        if (bookAvatarInput.files[0]) {
          formData.append("book_avatar", bookAvatarInput.files[0]);
        }

        const url = isEditMode
          ? `/api/book/edit/${editBookId}`
          : "/api/book/add";
        const method = isEditMode ? "PUT" : "POST";

        fetch(url, {
          method: method,
          headers: {
            Authorization: `Bearer ${token}`,
          },
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.status === "1") {
              alert(`${isEditMode ? "Cập nhật" : "Thêm"} sách thành công`);
              fetchBooks();
              closeDialog();
            } else {
              alert(
                `${isEditMode ? "Cập nhật" : "Thêm"} sách thất bại: ${
                  data.message
                }`
              );
            }
          })
          .catch((error) => {
            console.error("Error saving book:", error);
            alert(
              `Có lỗi xảy ra khi ${isEditMode ? "cập nhật" : "thêm"} sách: ${
                error.message
              }`
            );
          });
      }

      document.addEventListener("DOMContentLoaded", () =>
        fetchBooks(currentPage)
      );
    </script>
  </body>
</html>
